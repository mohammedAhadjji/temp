<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tableau de Bord - Gestion de Frigo Médical</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
        }
        .sidebar {
            width: 250px;
            background-color: #2c3e50;
            color: white;
            height: 100vh;
            position: fixed;
            top: 0;
            left: 0;
            padding: 20px;
        }
        .sidebar h1 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 1.5rem;
        }
        .sidebar nav ul {
            list-style: none;
            padding: 0;
        }
        .sidebar nav ul li {
            margin: 15px 0;
        }
        .sidebar nav ul li a {
            color: white;
            text-decoration: none;
            display: flex;
            align-items: center;
            padding: 10px;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        .sidebar nav ul li a:hover {
            background-color: #34495e;
        }
        .sidebar nav ul li a i {
            margin-right: 10px;
        }
        .content {
            margin-left: 250px;
            padding: 20px;
        }
        .chart-container {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            height: 400px;
            position: relative;
        }
        .hidden {
            display: none;
        }
        .alert {
            margin-bottom: 10px;
        }

        /* Styles responsives */
        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }
            .content {
                margin-left: 0;
            }
            .chart-container {
                height: 300px; 
            }
        }
    </style>
</head>
<body>
    <!-- Barre latérale -->
    <aside class="sidebar">
        <h1>Frigo Médical</h1>
        <nav>
            <ul>
                <li><a href="#" onclick="showSection('dashboard')"><i class="fas fa-home"></i> Dashboard</a></li>
                <li><a href="#" onclick="showSection('filterByDay')"><i class="fas fa-calendar-day"></i> Filtrer par Jour</a></li>
                <li><a href="#" onclick="showSection('filterByMonth')"><i class="fas fa-calendar-alt"></i> Filtrer par Mois</a></li>
                <li><a href="#" onclick="showSection('postData')"><i class="fas fa-plus"></i> Poster des Données</a></li>
                <li><a href="#" onclick="showSection('incidents')"><i class="fas fa-bell"></i> Gestion des Incidents</a></li>
             <li>
    <a href="/logout">
        <i class="fas fa-sign-out-alt"></i> Logout
    </a>
</li>
            </ul>
        </nav>
    </aside>

    <!-- Contenu principal -->
    <main class="content">
        <!-- Section Dashboard -->
        <section id="dashboard">
            <h1 class="mb-4">Tableau de Bord</h1>
            <div id="alertesContainer"></div>
           
            <!-- Tableau pour afficher les données récentes -->
            <div class="table-responsive mt-4">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Date et Heure</th>
                            <th>Température (°C)</th>
                            <th>Humidité (%)</th>
                            <th>Délai de Post</th>
                        </tr>
                    </thead>
                    <tbody id="recentDataTable">
                        <!-- Les données récentes seront insérées ici par JavaScript -->
                    </tbody>
                </table>
            </div>
        </section>

        <!-- Section Filtrer par Jour -->
        <section id="filterByDay" class="hidden">
            <h1 class="mb-4">Filtrer par Jour</h1>
            <div class="filters mb-4">
                <label for="datePicker">Sélectionnez un jour :</label>
                <input type="date" id="datePicker" onchange="filterDataByDay()">
            </div>
            <div class="chart-container" id="temperatureChartDayContainer"></div>
            <div class="chart-container" id="humidityChartDayContainer"></div>
            <!-- Bouton pour générer le CSV filtré par jour -->
            <button class="btn btn-success mt-3" onclick="generateCSV('day')">Télécharger les données du jour en CSV</button>
        </section>

        <!-- Section Filtrer par Mois -->
        <section id="filterByMonth" class="hidden">
            <h1 class="mb-4">Filtrer par Mois</h1>
            <div class="filters mb-4">
                <label for="monthPicker">Sélectionnez un mois :</label>
                <input type="month" id="monthPicker" onchange="filterDataByMonth()">
            </div>
            <div class="chart-container" id="temperatureChartMonthContainer"></div>
            <div class="chart-container" id="humidityChartMonthContainer"></div>
            <!-- Bouton pour générer le CSV filtré par mois -->
            <button class="btn btn-success mt-3" onclick="generateCSV('month')">Télécharger les données du mois en CSV</button>
        </section>

        <!-- Section Poster des Données -->
        <section id="postData" class="hidden">
            <h1 class="mb-4">Poster des Données</h1>
            <form id="postDataForm" class="bg-white p-4 rounded shadow">
                <div class="mb-3">
                    <label for="temperature" class="form-label">Température (°C):</label>
                    <input type="number" class="form-control" id="temperature" name="temperature" required>
                </div>
                <div class="mb-3">
                    <label for="humidity" class="form-label">Humidité (%):</label>
                    <input type="number" class="form-control" id="humidity" name="humidity" required>
                </div>
                <button type="submit" class="btn btn-primary"  >Poster</button>
            </form>
        </section>

        <!-- Section Gestion des Incidents -->
        <section id="incidents" class="hidden">
            <h1 class="mb-4">Gestion des Incidents</h1>
            <div id="incidentsList"></div>
        </section>
    </main>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Variables globales
        let data = [];
        let temperatureChart, humidityChart;
        let temperatureChartDay, humidityChartDay;
        let temperatureChartMonth, humidityChartMonth;
        const seuilTempMax = 25; // Température maximale en °C
        const seuilHumidite = 70; // Humidité maximale en %

        // Récupérer les données de l'API
        async function fetchData() {
            try {
                const apiUrl = "https://mohammedahadjji.pythonanywhere.com/api/post?format=json";
                const response = await fetch(apiUrl);
                if (!response.ok) throw new Error('Erreur réseau');
                data = await response.json();
                console.log("Données reçues:", data);
                if (data.length > 0) {
                    checkAlerts(data);
                    updateRecentDataTable(data); // Mettre à jour le tableau des données récentes
                    if (document.getElementById('dashboard').classList.contains('active')) {
                        filterDataByDay();
                    }
                } else {
                    console.error("Aucune donnée disponible.");
                }
            } catch (error) {
                console.error('Erreur lors de la récupération des données:', error);
            }
        }

        // Filtrer les données par jour
        function filterDataByDay() {
            const selectedDate = document.getElementById('datePicker').value;
            const filteredData = data.filter(row => new Date(row.dt).toISOString().split('T')[0] === selectedDate);
            updateCharts(filteredData, 'temperatureChartDayContainer', 'humidityChartDayContainer');
        }

        // Filtrer les données par mois
        function filterDataByMonth() {
            const selectedMonth = document.getElementById('monthPicker').value;
            const filteredData = data.filter(row => {
                const rowDate = new Date(row.dt);
                const rowMonth = rowDate.getFullYear() + '-' + String(rowDate.getMonth() + 1).padStart(2, '0');
                return rowMonth === selectedMonth;
            });
            updateCharts(filteredData, 'temperatureChartMonthContainer', 'humidityChartMonthContainer');
        }

        // Vérifier les alertes
        function checkAlerts(data) {
           // console.log(data);
            const latestData = data[data.length - 1];
            const alertes = [];
            if (latestData.temp > seuilTempMax){ alertes.push(`Température élevée: ${latestData.temp}°C (dépasse ${seuilTempMax}°C)`)};
            if (latestData.hum > seuilHumidite) alertes.push(`Humidité élevée: ${latestData.hum}% (dépasse ${seuilHumidite}%)`);
            displayAlerts(alertes);
        }

        // Afficher les alertes
        function displayAlerts(alertes) {
            const alertesContainer = document.getElementById('alertesContainer');
            const incidentsList = document.getElementById('incidentsList');
            alertesContainer.innerHTML = '';
            incidentsList.innerHTML = '';
            alertes.forEach(alerte => {
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert alert-danger';
                alertDiv.textContent = alerte;
                alertesContainer.appendChild(alertDiv);
                incidentsList.appendChild(alertDiv.cloneNode(true));
            });
        }

        // Mettre à jour les graphiques
        function updateCharts(data, tempContainerId, humContainerId) {
            const labels = data.map(row => new Date(row.dt).toLocaleString());
            const temperatureData = data.map(row => row.temp);
            const humidityData = data.map(row => row.hum);

            // Détruire les graphiques existants s'ils existent
            if (window[tempContainerId.replace('Container', '')]) window[tempContainerId.replace('Container', '')].destroy();
            if (window[humContainerId.replace('Container', '')]) window[humContainerId.replace('Container', '')].destroy();

            // Créer un élément <canvas> pour le graphique de température
            const tempCanvas = document.createElement('canvas');
            tempCanvas.id = tempContainerId.replace('Container', '');
            document.getElementById(tempContainerId).innerHTML = ''; // Vider le conteneur
            document.getElementById(tempContainerId).appendChild(tempCanvas);

            // Créer un élément <canvas> pour le graphique d'humidité
            const humCanvas = document.createElement('canvas');
            humCanvas.id = humContainerId.replace('Container', '');
            document.getElementById(humContainerId).innerHTML = ''; // Vider le conteneur
            document.getElementById(humContainerId).appendChild(humCanvas);

            // Créer le graphique de température
            const tempCtx = tempCanvas.getContext('2d');
            window[tempContainerId.replace('Container', '')] = new Chart(tempCtx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Température (°C)',
                        data: temperatureData,
                        borderColor: '#4CAF50',
                        fill: false,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: { title: { display: true, text: 'Température (°C)' } },
                        x: { title: { display: true, text: 'Date et Heure' } }
                    }
                }
            });

            // Créer le graphique d'humidité
            const humCtx = humCanvas.getContext('2d');
            window[humContainerId.replace('Container', '')] = new Chart(humCtx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Humidité (%)',
                        data: humidityData,
                        borderColor: '#2196F3',
                        fill: false,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: { title: { display: true, text: 'Humidité (%)' } },
                        x: { title: { display: true, text: 'Date et Heure' } }
                    }
                }
            });
        }

        // Fonction pour afficher les données récentes dans le tableau
        function updateRecentDataTable(data) {
            const tableBody = document.getElementById('recentDataTable');
            tableBody.innerHTML = ''; // Vider le tableau

            // Trier les données par date (du plus récent au plus ancien)
            const sortedData = data.sort((a, b) => new Date(b.dt) - new Date(a.dt));

            // Afficher les 10 dernières données
            sortedData.slice(0, 10).forEach(row => {
                const rowDate = new Date(row.dt);
                const delayInSeconds = Math.floor((new Date() - rowDate) / 1000); // Délai en secondes

                // Convertir le délai en un format plus lisible (jours, heures, minutes, secondes)
                const days = Math.floor(delayInSeconds / (3600 * 24));
                const hours = Math.floor((delayInSeconds % (3600 * 24)) / 3600);
                const minutes = Math.floor((delayInSeconds % 3600) / 60);
                const seconds = delayInSeconds % 60;

                let delayText = '';
                if (days > 0) {
                    delayText += `${days} jour${days > 1 ? 's' : ''}, `;
                }
                if (hours > 0) {
                    delayText += `${hours} heure${hours > 1 ? 's' : ''}, `;
                }
                if (minutes > 0) {
                    delayText += `${minutes} minute${minutes > 1 ? 's' : ''}, `;
                }
                delayText += `${seconds} seconde${seconds > 1 ? 's' : ''}`;

                const tableRow = document.createElement('tr');
                tableRow.innerHTML = `
                    <td>${rowDate.toLocaleString()}</td>
                    <td>${row.temp}</td>
                    <td>${row.hum}</td>
                    <td>${delayText}</td>
                `;
                tableBody.appendChild(tableRow);
            });
        }

        // Fonction pour générer et télécharger un fichier CSV
        function generateCSV(filterType) {
            let filteredData = [];

            if (filterType === 'day') {
                // Filtrer les données par jour
                const selectedDate = document.getElementById('datePicker').value;
                filteredData = data.filter(row => new Date(row.dt).toISOString().split('T')[0] === selectedDate);
            } else if (filterType === 'month') {
                // Filtrer les données par mois
                const selectedMonth = document.getElementById('monthPicker').value;
                filteredData = data.filter(row => {
                    const rowDate = new Date(row.dt);
                    const rowMonth = rowDate.getFullYear() + '-' + String(rowDate.getMonth() + 1).padStart(2, '0');
                    return rowMonth === selectedMonth;
                });
            } else {
                // Si aucun filtre n'est spécifié, utiliser toutes les données
                filteredData = data;
            }

            if (filteredData.length === 0) {
                alert("Aucune donnée disponible pour exporter.");
                return;
            }

            // Créer les en-têtes du CSV
            const headers = ["Date et Heure", "Temperature (°C)", "Humidite (%)"];
            const rows = filteredData.map(row => [
                new Date(row.dt).toLocaleString(), // Date et heure
                row.temp, // Température
                row.hum   // Humidité
            ]);

            // Combiner les en-têtes et les données
            const csvContent = [headers, ...rows]
                .map(row => row.join(",")) // Convertir chaque ligne en chaîne CSV
                .join("\n"); // Joindre les lignes avec un saut de ligne

            // Créer un fichier CSV et le télécharger
            const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
            const link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.download = `donnees_frigo_medical_${filterType}.csv`; // Nom du fichier
            link.click(); // Déclencher le téléchargement
        }

        // Poster des données
       document.getElementById('postDataForm').addEventListener('submit', async function (e) {
    e.preventDefault();

    // Retrieve and parse input values
    const temperatureInput = document.getElementById('temperature');
    const humidityInput = document.getElementById('humidity');

    const temperature = parseFloat(temperatureInput.value);
    const humidity = parseFloat(humidityInput.value);

    // Basic input validation
    if (isNaN(temperature) || isNaN(humidity)) {
        alert('Veuillez entrer des valeurs numériques pour la température et l\'humidité.');
        return;
    }

    // Create data object with current date-time
    const data = {
        temp: temperature,
        hum: humidity,
        dt: new Date().toISOString()
    };

    try {
        // Send POST request
        const response = await fetch("https://mohammedahadjji.pythonanywhere.com/api/post", {
            method: "POST",
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });

        if (!response.ok) {
            throw new Error('Erreur réseau: ' + response.statusText);
        }

        // Successful response handling
        alert('Données postées avec succès !');

        // Fetch new data and update the dashboard
        await fetchData();
        showSection('dashboard');

    } catch (error) {
        console.error('Erreur lors de la publication des données:', error);
        alert('Une erreur s\'est produite lors de la publication des données.');
    }
});

        // Afficher une section et masquer les autres
        function showSection(sectionId) {
            document.querySelectorAll('main section').forEach(section => {
                section.classList.toggle('hidden', section.id !== sectionId);
                section.classList.toggle('active', section.id === sectionId);
            });
            if (sectionId === 'dashboard') {
                fetchData(); // Rafraîchir les données pour le Dashboard
            } else if (sectionId === 'filterByDay') {
                filterDataByDay(); // Appliquer le filtre par jour
            }
        }

        // Rafraîchir les données toutes les 10 secondes
        setInterval(fetchData, 10000);

        // Charger les données initiales et afficher la section Dashboard par défaut
        fetchData();
        showSection('dashboard');
    </script>
</body>
</html>